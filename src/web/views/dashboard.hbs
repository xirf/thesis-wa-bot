User
<div class="grid gap-12">
    {{#each data as |item|}}
    <div class="flex flex-col gap-2">
        <div class="flex items-center justify-between">
            <h1 class="text-xl font-bold">{{item.title}}</h1>
            <button class="btn btn-primary btn-sm" onclick="openDialog('{{item.type}}')">Tambah</button>
        </div>
        <table class="table bg-base-200">
            <thead>
                <tr>
                    <th>Nama</th>
                    <th>{{item.header1}}</th>
                    <th>Email</th>
                    <th>Telepon</th>
                    <th>Aksi</th>
                </tr>
            </thead>
            <tbody>
                {{#each item.data}}
                <tr>
                    <td>{{this.nama}}</td>
                    <td>{{this.nim}} {{this.nidn}}</td>
                    <td>{{this.email}}</td>
                    <td>{{this.telepon}}</td>
                    <td class="w-32">
                        <button data-id="{{this.id}}" onclick="openDialog('{{item.type}}', {{json this}})"
                            class="action_button_edit btn btn-square btn-sm btn-primary" title="edit">‚úèÔ∏è</button>
                        <button data-id="{{this.id}}" class="action_button_delete btn btn-square btn-sm btn-secondary"
                            title="hapus">üóëÔ∏è</button>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
    {{/each}}
</div>
<dialog id="editModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Edit</h3>
        <form id="submitEditForm" class="grid gap-4">
            <input type="hidden" id="userId" name="id" />
            <input type="hidden" id="dataType" name="type" />
            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">Nama</span>
                </div>
                <input type="text" name="nama" placeholder="Nama" class="input input-bordered w-full" id="name" />
            </label>
            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">NIM / NIDN</span>
                </div>
                <input type="text" name="idNum" placeholder="NIDN" class="input input-bordered w-full" id="idnum" />
            </label>
            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">Email</span>
                </div>
                <input type="email" name="email" placeholder="Email" class="input input-bordered w-full" id="email" />
            </label>
            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">Telepon</span>
                </div>
                <input type="number" name="telepon" placeholder="Telepon" class="input input-bordered w-full"
                    id="tel" />
            </label>
            <div class="grid gap-4 grid-cols-2">
                <button type="button" id="cancelBtn" class="btn btn-warning btn-outline">Batal</button>
                <button class="btn btn-primary btn-">Simpan</button>
            </div>
        </form>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>

<div id="allData" class="hidden">
    {{json data}}
</div>
<script>
    const allData = JSON.parse(document.getElementById('allData').innerText)
    const form = document.querySelector("#submitEditForm")
    let type = ""
    let editContent = null

    // Buat fungsi handler terpisah untuk submit form
    function onSubmit(event) {
        event.preventDefault()

        verifySubmitedData(form, type).then(data => {
            console.log(data)
            const url = editContent ? "/update" : "/new"
            submitEditForm(data, url).then((res) => {
                hideModal(editModal)
                // window.location.reload()
            })
        }).catch(error => {
            alert(error)
        })
    }

    function openDialog(type, _editContent) {
        const editModal = document.getElementById("editModal")
        const userId = editModal.querySelector("#userId")
        const dataType = editModal.querySelector("#dataType")
        const nama = editModal.querySelector("#name")
        const idnum = editModal.querySelector("#idnum")
        const email = editModal.querySelector("#email")
        const tel = editModal.querySelector("#tel")
        const cancelBtn = editModal.querySelector('#cancelBtn')
        const saveBtn = editModal.querySelector('#saveBtn')

        editContent = _editContent
        if (editContent != undefined) {
            userId.value = parseInt(editContent.id)
            nama.value = editContent.nama
            idnum.value = editContent.nim != null ? editContent.nim : editContent.nidn != null ? editContent.nidn : ""
            email.value = editContent.email ?? ""
            tel.value = editContent.telepon || 0
        } else {
            userId.value = ""
            nama.value = ""
            idnum.value = ""
            email.value = ""
            tel.value = ""
        }

        type = type
        dataType.value = type
        editModal.classList.add("modal-open")

        cancelBtn.addEventListener("click", () => hideModal(editModal))

        form.addEventListener('submit', onSubmit)
    }

    function closeDialog() {
        form.removeEventListener('submit', onSubmit)
    }




    function verifySubmitedData(form, type) {
        return new Promise((resolve, reject) => {
            try {
                const formData = new FormData(form)
                const data = {}
                for (let [ key, value ] of formData.entries()) {
                    data[ key ] = value
                }

                const teleponListWithoutCurrent = new Set()
                const nimListWithoutCurrent = new Set()



                const currentData = allData.forEach(items => {
                    items.data.forEach(item => {
                        if (data.id == item.id && data.type == items.type) {
                            return
                        } else {
                            teleponListWithoutCurrent.add(item.telepon)
                            nimListWithoutCurrent.add(item.nidn || item.nim)
                        }
                    })
                })


                if (nimListWithoutCurrent.has(data.idNum)) {
                    reject('NIM/NIDN sudah digunakan')
                }

                if (teleponListWithoutCurrent.has(data.telepon)) {
                    reject('Nomor telepon sudah digunakan')
                }

                if (type === 'dosen') {
                    data.nidn = data.idNum
                    delete data.idNum


                } else {
                    data.nim = data.idNum
                    delete data.idNum
                }

                resolve(data)
            } catch (error) {
                console.error(error)
                reject(error)
            }
        })
    }

    function submitEditForm(data, url = "/update") {
        return new Promise(async (resolve, reject) => {
            try {
                let res = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                let result = await res.json()
                resolve(result)
            } catch (error) {
                console.error(error)
                reject(error)
            }
        })
    }

    function hideModal(modal) {
        modal.classList.remove('modal-open')
    }


</script>